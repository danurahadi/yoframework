buildscript {
    ext {
        version = project.property('version')
        bintrayUser = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        bintrayApiKey = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

        kotlinVersion = "1.2.10"
        vertxVersion = '3.5.0'
        pebbleVersion = '2.4.0'

        coroutineVersion = "0.20"

        logbackVersion = '1.2.3'
        logstashLogbackEncoderVersion = '4.11'

        commonsLangVersion = '3.4'
        commonsIOVersion = '2.5'
        commonCsvVersion = '1.4'
        commonsCodecVersion = '1.10'

        daggerVersion = '2.12'

        jacksonVersion = '2.9.1'

        morphiaVersion = '1.3.2'

        quartzVersion = "2.3.0"

        javaxElApiVersion = '2.2.4'
        javaxElVersion = '2.2.4'

        hibernateValidatorVersion = '5.3.3.Final'
        jBCryptVersion = '0.4.1'
        guavaVersion = '23.5-jre'

        ebeanVersion = "11.7.1"
        ebeanQueryBeanVersion = "11.1.1"

        hikariCPVersion = "2.6.3"
        flywayVersion = "4.2.0"

        jUnitVersion = '4.12'
        restAssuredVersion = '3.0.3'
        embeddedMongoVersion = '2.0.0'

        protocVersion = "3.2.0"
        vertxProtocGenVersion = "1.6.1"
    }

    repositories {
        mavenCentral()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "io.ebean:ebean-gradle-plugin:11.5.1"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
    }

}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.2.10" apply false
    id "org.jetbrains.kotlin.kapt" version "1.2.10" apply false
    id "com.jfrog.bintray" version "1.7.3" apply false
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.kotlin.kapt'
    apply plugin: 'com.jfrog.bintray'

    repositories {
        maven {
            url "https://dl.bintray.com/jasoet/yoframework"
        }
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        compile "com.google.dagger:dagger:$daggerVersion"
        kapt "com.google.dagger:dagger-compiler:$daggerVersion"
        kaptTest "com.google.dagger:dagger-compiler:$daggerVersion"

        testCompile "io.vertx:vertx-unit:$vertxVersion"
        testCompile "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
        testCompile "junit:junit:$jUnitVersion"
    }

    kotlin {
        experimental {
            coroutines "enable"
        }
    }

    compileKotlin {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        kotlinOptions {
            jvmTarget = "1.8"
            apiVersion = "1.2"
            languageVersion = "1.2"
            allWarningsAsErrors = true
        }
    }

    compileTestKotlin {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        kotlinOptions {
            jvmTarget = "1.8"
            apiVersion = "1.2"
            languageVersion = "1.2"
            allWarningsAsErrors = true
        }
    }

    idea {
        module {
            testSourceDirs += file('build/generated/source/kapt/test')
            sourceDirs += file('build/generated/source/kapt/main')

            testSourceDirs += file('build/generated/source/kaptKotlin/test')
            sourceDirs += file('build/generated/source/kaptKotlin/main')
        }
    }

    task compile(dependsOn: "testClasses")

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }

    def pomConfig = {
        licenses {
            license {
                name "The Apache Software License, Version 2.0"
                url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution "repo"
            }
        }
        developers {
            developer {
                id "jasoet"
                name "Deny Prasetyo"
                email "jasoet87@gmail.com"
            }
        }

        scm {
            url "https://github.com/jasoet/yoframework"
        }
    }

    publishing {
        publications {
            YoPublication(MavenPublication) {
                from components.java
                artifact sourcesJar
                groupId 'id.yoframework'
                artifactId "${project.name}"
                version "${version}"
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', 'Thin Kotlin DSL on top of Dagger and Vert.x')
                    root.appendNode('name', 'Yo Framework')
                    root.appendNode('url', 'https://yoframework.id')
                    root.children().last() + pomConfig
                }
            }
        }
    }

    bintray {
        user = "${bintrayUser}"
        key = "${bintrayApiKey}"
        publications = ['YoPublication']
        publish = true
        override = true
        pkg {
            repo = 'yoframework'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/jasoet/yoframework'
            issueTrackerUrl = 'https://github.com/jasoet/yoframework/issues'
            labels = ['kotlin', 'vertx', 'dsl']
            publicDownloadNumbers = true
            version {
                name = "${project.version}"
                vcsTag = "${project.version}"
            }
        }
    }
}

task build(dependsOn: ["core:build", "extra:build", "quartz:build", "web:build", "morphia:build", "ebean:build", "grpc:build"])

task artifactUpload(dependsOn: ["core:bintrayUpload", "extra:bintrayUpload", "quartz:bintrayUpload", "web:bintrayUpload", "morphia:bintrayUpload", "ebean:bintrayUpload", "grpc:bintrayUpload"])

task clean(dependsOn: ["core:clean", "extra:clean", "quartz:clean", "web:clean", "morphia:clean", "ebean:clean", "grpc:clean"])

task compile(dependsOn: ["core:testClasses", "extra:testClasses", "quartz:testClasses", "web:testClasses", "morphia:testClasses", "ebean:testClasses", "grpc:testClasses"])

task coreUpload(dependsOn: ["core:clean", "core:testClasses", "core:bintrayUpload"])

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}
