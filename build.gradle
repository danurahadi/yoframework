buildscript {
    ext {
        version = project.property('version')
        bintrayUser = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        bintrayApiKey = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

        kotlinVersion = "1.4.21"
        vertxVersion = '3.9.5'
        pebbleVersion = '3.1.5'

        coroutineVersion = "1.4.2"
        arrowVersion = "0.7.2"

        logbackVersion = '1.2.3'
        logstashLogbackEncoderVersion = '6.6'

        commonsLangVersion = '3.11'
        commonsIOVersion = '2.8.0'
        commonsCodecVersion = '1.15'

        daggerVersion = '2.32'
        jacksonVersion = '2.12.1'
        morphiaVersion = '1.3.2'
        quartzVersion = "2.3.2"

        jakartaElVersion = '4.0.0'
        hibernateValidatorVersion = '7.0.1.Final'
        elImplVersion = "2.2"

        jBCryptVersion = '0.4.1'
        guavaVersion = '23.5-jre'
        asciiTableVersion = '0.3.2'

        ebeanVersion = "12.6.7"
        ebeanQueryBeanVersion = "12.6.7"
        ebeanElasticVersion = "12.5.0"
        ebeanGradlePluginVersion = "11.39.1"

        jdbiVersion = "3.0.1"
        protobufGradlePluginVersion = "0.8.14"

        hikariCPVersion = "4.0.2"
        flywayVersion = "7.5.3"

        restAssuredVersion = '3.0.3'
        embeddedMongoVersion = '2.0.0'

        hystrixVersion = "1.5.4"
        jschVersion = "0.1.54"

        protocVersion = "3.5.1"
        vertxProtocGenVersion = "1.9.0"

        mockitoVersion = "2.13.0"
        jUnitVersion = "5.1.0"

        spekVersion = "1.1.5"
        kluentVersion = "1.35"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "io.ebean:ebean-gradle-plugin:$ebeanGradlePluginVersion"
        classpath "com.google.protobuf:protobuf-gradle-plugin:$protobufGradlePluginVersion"
    }

}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.4.21" apply false
    id "org.jetbrains.kotlin.kapt" version "1.4.21" apply false
    id "com.jfrog.bintray" version "1.7.3" apply false
    id "io.gitlab.arturbosch.detekt" version "1.0.0.RC7-3" apply false
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'maven-publish'

    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.kotlin.kapt'

    apply plugin: "io.gitlab.arturbosch.detekt"
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'jacoco'

    repositories {
        maven {
            url "https://dl.bintray.com/jasoet/yoframework"
        }
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutineVersion"

        implementation "io.arrow-kt:arrow-core:$arrowVersion"
        implementation "io.arrow-kt:arrow-typeclasses:$arrowVersion"

        implementation "io.arrow-kt:arrow-instances-data:$arrowVersion"
        implementation "io.arrow-kt:arrow-instances-core:$arrowVersion"

        implementation "io.arrow-kt:arrow-data:$arrowVersion"
        implementation "io.arrow-kt:arrow-syntax:$arrowVersion"
        kapt "io.arrow-kt:arrow-annotations-processor:$arrowVersion"

        implementation "com.google.dagger:dagger:$daggerVersion"
        kapt "com.google.dagger:dagger-compiler:$daggerVersion"
        kaptTest "com.google.dagger:dagger-compiler:$daggerVersion"

        testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
        testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
        testImplementation "org.amshove.kluent:kluent:$kluentVersion"

        testImplementation "org.junit.jupiter:junit-jupiter-api:$jUnitVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jUnitVersion"

        testImplementation("org.jetbrains.spek:spek-api:$spekVersion") {
            exclude group: 'org.jetbrains.kotlin'
        }
        testRuntime("org.jetbrains.spek:spek-junit-platform-engine:$spekVersion") {
            exclude group: 'org.jetbrains.kotlin'
        }
    }

    detekt {
        version = "1.0.0.RC7-3"
        profile("main") {
            input = "$projectDir/src/main/kotlin"
            config = "$rootDir/detekt.yml"
            filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
        }
    }

    compileKotlin {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        kotlinOptions {
            jvmTarget = "1.8"
            apiVersion = "1.4"
            languageVersion = "1.4"
            allWarningsAsErrors = false
        }
    }

    compileTestKotlin {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        kotlinOptions {
            jvmTarget = "1.8"
            apiVersion = "1.4"
            languageVersion = "1.4"
            allWarningsAsErrors = false
        }
    }

    jacoco {
        toolVersion = "0.8.1"
    }

    test {
        finalizedBy jacocoTestReport

        useJUnitPlatform {
            includeEngines 'spek', 'junit-jupiter'
        }

        testLogging {
            exceptionFormat "full"
            showCauses true
            showExceptions true
            showStackTraces true
            showStandardStreams true
            events = ["passed", "skipped", "failed", "standardError"]
        }
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true

            testSourceDirs += file('build/generated/source/kapt/test')
            sourceDirs += file('build/generated/source/kapt/main')

            testSourceDirs += file('build/generated/source/kaptKotlin/test')
            sourceDirs += file('build/generated/source/kaptKotlin/main')
        }
    }


    task compile(dependsOn: "testClasses")

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }

    def pomConfig = {
        licenses {
            license {
                name "The Apache Software License, Version 2.0"
                url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution "repo"
            }
        }
        developers {
            developer {
                id "jasoet"
                name "Deny Prasetyo"
                email "jasoet87@gmail.com"
            }
        }

        scm {
            url "https://github.com/jasoet/yoframework"
        }
    }

    publishing {
        publications {
            YoPublication(MavenPublication) {
                from components.java
                artifact sourcesJar
                groupId 'id.yoframework'
                artifactId "${project.name}"
                version "${version}"
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', 'Thin Kotlin DSL on top of Dagger and Vert.x')
                    root.appendNode('name', 'Yo Framework')
                    root.appendNode('url', 'https://yoframework.id')
                    root.children().last() + pomConfig
                }
            }
        }
    }

    bintray {
        user = "${bintrayUser}"
        key = "${bintrayApiKey}"
        publications = ['YoPublication']
        publish = true
        override = true
        pkg {
            repo = 'yoframework'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/jasoet/yoframework'
            issueTrackerUrl = 'https://github.com/jasoet/yoframework/issues'
            labels = ['kotlin', 'vertx', 'dsl']
            publicDownloadNumbers = true
            version {
                name = "${project.version}"
                vcsTag = "${project.version}"
            }
        }
    }
}

task clean(dependsOn: ["core:clean", "db:clean", "extra:clean", "hystrix:clean", "quartz:clean", "web:clean", "morphia:clean", "ebean:clean", "grpc:clean", "ssh:clean", "jdbi:clean"])

task compile(dependsOn: ["core:testClasses", "db:testClasses", "extra:testClasses", "hystrix:testClasses", "quartz:testClasses", "web:testClasses", "morphia:testClasses", "ebean:testClasses", "grpc:testClasses", "ssh:testClasses", "jdbi:testClasses"])

task localPublish(dependsOn: ["core:publishToMavenLocal", "db:publishToMavenLocal", "extra:publishToMavenLocal", "hystrix:publishToMavenLocal", "quartz:publishToMavenLocal", "web:publishToMavenLocal", "morphia:publishToMavenLocal", "ebean:publishToMavenLocal", "grpc:publishToMavenLocal", "ssh:publishToMavenLocal", "jdbi:publishToMavenLocal"])

task artifactUpload(dependsOn: ["core:bintrayUpload", "db:bintrayUpload", "extra:bintrayUpload", "hystrix:bintrayUpload", "quartz:bintrayUpload", "web:bintrayUpload", "morphia:bintrayUpload", "ebean:bintrayUpload", "grpc:bintrayUpload", "ssh:bintrayUpload", "jdbi:bintrayUpload"])

task upload(dependsOn: ["localPublish", "artifactUpload"])

