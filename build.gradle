ext {
    version = project.property('version')
    bintrayUser = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    bintrayApiKey = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    kotlinVersion = "1.4.30"
    vertxVersion = '3.9.5'
    pebbleVersion = '3.1.5'

    coroutineVersion = "1.4.2"
    arrowVersion = "0.7.2"

    logbackVersion = '1.2.3'
    logstashLogbackEncoderVersion = '6.6'

    commonsLangVersion = '3.11'
    commonsIOVersion = '2.8.0'
    commonsCodecVersion = '1.15'

    daggerVersion = '2.32'
    jacksonVersion = '2.12.1'
    morphiaVersion = '1.3.2'
    quartzVersion = "2.3.2"

    jakartaElVersion = '4.0.0'
    hibernateValidatorVersion = '7.0.1.Final'
    elImplVersion = "2.2"

    jBCryptVersion = '0.4.1'
    guavaVersion = '23.5-jre'
    asciiTableVersion = '0.3.2'

    ebeanVersion = "12.6.7"
    ebeanQueryBeanVersion = "12.6.7"
    ebeanElasticVersion = "12.5.0"
    ebeanGradlePluginVersion = "11.39.1"

    jdbiVersion = "3.0.1"
    protobufGradlePluginVersion = "0.8.14"

    hikariCPVersion = "4.0.2"
    flywayVersion = "7.5.3"

    restAssuredVersion = '3.0.3'
    embeddedMongoVersion = '2.0.0'

    hystrixVersion = "1.5.4"
    jschVersion = "0.1.54"

    protocVersion = "3.5.1"
    vertxProtocGenVersion = "1.9.0"

    mockitoVersion = "2.13.0"
    jUnitVersion = "5.1.0"

    spekVersion = "1.1.5"
    kluentVersion = "1.65"
}

subprojects {

    task compile(dependsOn: "testClasses")
    task sourcesJar(type: Jar)

    artifacts {
        archives sourcesJar
    }

    def pomConfig = {
        licenses {
            license {
                name "The Apache Software License, Version 2.0"
                url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution "repo"
            }
        }
        developers {
            developer {
                id "jasoet"
                name "Deny Prasetyo"
                email "jasoet87@gmail.com"
            }
        }

        scm {
            url "https://github.com/jasoet/yoframework"
        }
    }

    publishing {
        publications {
            YoPublication(MavenPublication) {
                from components.java
                artifact sourcesJar
                groupId 'id.yoframework'
                artifactId "${project.name}"
                version "${version}"
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', 'Thin Kotlin DSL on top of Dagger and Vert.x')
                    root.appendNode('name', 'Yo Framework')
                    root.appendNode('url', 'https://yoframework.id')
                    root.children().last() + pomConfig
                }
            }
        }
    }

    bintray {
        user = "${bintrayUser}"
        key = "${bintrayApiKey}"
        publications = ['YoPublication']
        publish = true
        override = true
        pkg {
            repo = 'yoframework'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/jasoet/yoframework'
            issueTrackerUrl = 'https://github.com/jasoet/yoframework/issues'
            labels = ['kotlin', 'vertx', 'dsl']
            publicDownloadNumbers = true
            version {
                name = "${project.version}"
                vcsTag = "${project.version}"
            }
        }
    }
}

task clean(dependsOn: ["core:clean", "db:clean", "extra:clean", "hystrix:clean", "quartz:clean", "web:clean", "morphia:clean", "ebean:clean", "grpc:clean", "ssh:clean", "jdbi:clean"])

task compile(dependsOn: ["core:testClasses", "db:testClasses", "extra:testClasses", "hystrix:testClasses", "quartz:testClasses", "web:testClasses", "morphia:testClasses", "ebean:testClasses", "grpc:testClasses", "ssh:testClasses", "jdbi:testClasses"])

task localPublish(dependsOn: ["core:publishToMavenLocal", "db:publishToMavenLocal", "extra:publishToMavenLocal", "hystrix:publishToMavenLocal", "quartz:publishToMavenLocal", "web:publishToMavenLocal", "morphia:publishToMavenLocal", "ebean:publishToMavenLocal", "grpc:publishToMavenLocal", "ssh:publishToMavenLocal", "jdbi:publishToMavenLocal"])

task artifactUpload(dependsOn: ["core:bintrayUpload", "db:bintrayUpload", "extra:bintrayUpload", "hystrix:bintrayUpload", "quartz:bintrayUpload", "web:bintrayUpload", "morphia:bintrayUpload", "ebean:bintrayUpload", "grpc:bintrayUpload", "ssh:bintrayUpload", "jdbi:bintrayUpload"])

task upload(dependsOn: ["localPublish", "artifactUpload"])
