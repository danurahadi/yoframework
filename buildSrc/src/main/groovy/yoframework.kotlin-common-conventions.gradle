plugins {
    id "java-library"
    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.kapt"
    id "com.jfrog.bintray"
    id "io.gitlab.arturbosch.detekt"
    id "idea"
    id "maven-publish"
    id "jacoco"
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter {
        content {
            // just allow to include kotlinx projects
            // detekt needs 'kotlinx-html' for the html report
            includeGroup "org.jetbrains.kotlinx"
        }
    }
    maven {
        url "https://dl.bintray.com/jasoet/yoframework"
    }
}

dependencies {
    api "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutineVersion"

    api "io.arrow-kt:arrow-core:$arrowVersion"
    api "io.arrow-kt:arrow-typeclasses:$arrowVersion"

    api "io.arrow-kt:arrow-instances-data:$arrowVersion"
    api "io.arrow-kt:arrow-instances-core:$arrowVersion"

    api "io.arrow-kt:arrow-data:$arrowVersion"
    api "io.arrow-kt:arrow-syntax:$arrowVersion"
    kapt "io.arrow-kt:arrow-annotations-processor:$arrowVersion"

    api "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kaptTest "com.google.dagger:dagger-compiler:$daggerVersion"

    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation "org.amshove.kluent:kluent:$kluentVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$jUnitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jUnitVersion"

    testImplementation("org.jetbrains.spek:spek-api:$spekVersion") {
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntimeOnly("org.jetbrains.spek:spek-junit-platform-engine:$spekVersion") {
        exclude group: 'org.jetbrains.kotlin'
    }
}

tasks {
    compileKotlin {
        sourceCompatibility = JavaVersion.VERSION_15
        targetCompatibility = JavaVersion.VERSION_15

        kotlinOptions {
            jvmTarget = "15"
            apiVersion = "1.4"
            languageVersion = "1.4"
            allWarningsAsErrors = true
            incremental = true
            useIR = true
        }
    }

    compileTestKotlin {
        sourceCompatibility = JavaVersion.VERSION_15
        targetCompatibility = JavaVersion.VERSION_15

        kotlinOptions {
            jvmTarget = "15"
            apiVersion = "1.4"
            languageVersion = "1.4"
            allWarningsAsErrors = true
            incremental = true
            useIR = true
        }
    }

    test {
        finalizedBy jacocoTestReport

        useJUnitPlatform {
            includeEngines 'spek', 'junit-jupiter'
        }

        testLogging {
            exceptionFormat "full"
            showCauses true
            showExceptions true
            showStackTraces true
            showStandardStreams true
            events = ["passed", "skipped", "failed", "standardError"]
        }
    }

    jacoco {
        toolVersion = "0.8.6"
    }

    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report
        reports {
            html.enabled true
            xml.enabled false
            csv.enabled false
            html.destination file("${buildDir}/jacocoHtml")
        }
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true

            testSourceDirs += file('build/generated/source/kapt/test')
            sourceDirs += file('build/generated/source/kapt/main')

            testSourceDirs += file('build/generated/source/kaptKotlin/test')
            sourceDirs += file('build/generated/source/kaptKotlin/main')
        }
    }
}

task compile(dependsOn: "testClasses")

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

detekt {
    toolVersion = "1.16.0"
    input = files("src/main/kotlin")
    buildUponDefaultConfig = true
    parallel = true
    debug = false
    ignoreFailures = true
    config = files("$rootDir/detekt.yml")

    reports {
        html.enabled = true
        xml.enabled = false
        txt.enabled = false
        sarif.enabled = false
    }
}
tasks.detekt.jvmTarget = "13"

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "jasoet"
            name "Deny Prasetyo"
            email "jasoet87@gmail.com"
        }
    }

    scm {
        url "https://github.com/jasoet/yoframework"
    }
}

publishing {
    publications {
        YoPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            groupId 'id.yoframework'
            artifactId "${project.name}"
            version "${version}"
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Thin Kotlin DSL on top of Dagger and Vert.x')
                root.appendNode('name', 'Yo Framework')
                root.appendNode('url', 'https://yoframework.id')
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = "${bintrayUser}"
    key = "${bintrayApiKey}"
    publications = ['YoPublication']
    publish = true
    override = true
    pkg {
        repo = 'yoframework'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/jasoet/yoframework'
        issueTrackerUrl = 'https://github.com/jasoet/yoframework/issues'
        labels = ['kotlin', 'vertx', 'dsl']
        publicDownloadNumbers = true
        version {
            name = "${project.version}"
            vcsTag = "${project.version}"
        }
    }
}

